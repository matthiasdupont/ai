#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Exemple d'utilisation de YOLO (YOLOv8)
====================================

Ce script d√©montre l'utilisation de YOLOv8 pour la d√©tection d'objets.
"""

from ultralytics import YOLO
import cv2
import numpy as np
from pathlib import Path

def demo_detection_image(image_path=None):
    """
    D√©tection d'objets sur une image avec YOLOv8
    
    Args:
        image_path: Chemin vers l'image (si None, utilise une image de test)
    """
    print("=" * 60)
    print("D√âTECTION D'OBJETS AVEC YOLO")
    print("=" * 60)
    
    # Charger le mod√®le YOLOv8 pr√©-entra√Æn√© (nano version, plus l√©g√®re)
    print("\nüì• Chargement du mod√®le YOLOv8...")
    model = YOLO('yolov8n.pt')  # yolov8n = nano (le plus l√©ger)
    
    # Si aucune image n'est fournie, YOLO peut t√©l√©charger une image de test
    if image_path is None:
        print("‚ö†Ô∏è  Aucune image fournie. Utilisation d'une image de test...")
        # YOLO t√©l√©chargera automatiquement une image de test
        image_path = 'https://ultralytics.com/images/bus.jpg'
    
    # Effectuer la d√©tection
    print(f"\nüîç D√©tection sur: {image_path}")
    results = model(image_path)
    
    # Afficher les r√©sultats
    print("\nüìä R√âSULTATS DE LA D√âTECTION:")
    print("-" * 60)
    
    for result in results:
        # R√©cup√©rer les bo√Ætes d√©tect√©es
        boxes = result.boxes
        
        if len(boxes) == 0:
            print("Aucun objet d√©tect√©.")
        else:
            print(f"Nombre d'objets d√©tect√©s: {len(boxes)}")
            print()
            
            # Afficher les d√©tails de chaque d√©tection
            for i, box in enumerate(boxes):
                # Classe de l'objet
                class_id = int(box.cls[0])
                class_name = model.names[class_id]
                
                # Confiance
                confidence = float(box.conf[0])
                
                # Coordonn√©es de la bo√Æte (x1, y1, x2, y2)
                coords = box.xyxy[0].cpu().numpy()
                
                print(f"Objet {i+1}:")
                print(f"  - Classe: {class_name}")
                print(f"  - Confiance: {confidence:.2%}")
                print(f"  - Position: x1={coords[0]:.1f}, y1={coords[1]:.1f}, "
                      f"x2={coords[2]:.1f}, y2={coords[3]:.1f}")
                print()
        
        # Sauvegarder l'image avec les d√©tections
        output_path = 'yolo_detection_result.jpg'
        result.save(output_path)
        print(f"‚úÖ Image avec d√©tections sauvegard√©e: {output_path}")
        
        # Afficher l'image (optionnel, n√©cessite un environnement graphique)
        try:
            result.show()
        except:
            print("‚ö†Ô∏è  Impossible d'afficher l'image (pas d'environnement graphique)")

def demo_detection_webcam():
    """
    D√©tection d'objets en temps r√©el via webcam
    """
    print("=" * 60)
    print("D√âTECTION EN TEMPS R√âEL (WEBCAM)")
    print("=" * 60)
    print("Appuyez sur 'q' pour quitter")
    
    # Charger le mod√®le
    model = YOLO('yolov8n.pt')
    
    # Ouvrir la webcam
    cap = cv2.VideoCapture(0)
    
    if not cap.isOpened():
        print("‚ùå Erreur: Impossible d'ouvrir la webcam")
        return
    
    print("\nüé• Webcam ouverte. D√©tection en cours...")
    
    while True:
        # Lire une frame
        ret, frame = cap.read()
        if not ret:
            break
        
        # Effectuer la d√©tection
        results = model(frame, verbose=False)
        
        # Dessiner les r√©sultats sur la frame
        annotated_frame = results[0].plot()
        
        # Afficher la frame
        cv2.imshow('YOLO Detection', annotated_frame)
        
        # Quitter avec 'q'
        if cv2.waitKey(1) & 0xFF == ord('q'):
            break
    
    # Lib√©rer les ressources
    cap.release()
    cv2.destroyAllWindows()
    print("\n‚úÖ Webcam ferm√©e")

def demo_detection_video(video_path):
    """
    D√©tection d'objets sur une vid√©o
    
    Args:
        video_path: Chemin vers la vid√©o
    """
    print("=" * 60)
    print("D√âTECTION D'OBJETS SUR VID√âO")
    print("=" * 60)
    
    # Charger le mod√®le
    model = YOLO('yolov8n.pt')
    
    # V√©rifier que la vid√©o existe
    if not Path(video_path).exists():
        print(f"‚ùå Erreur: Fichier vid√©o non trouv√©: {video_path}")
        return
    
    print(f"\nüé¨ Traitement de la vid√©o: {video_path}")
    
    # Effectuer la d√©tection sur la vid√©o
    results = model(video_path, stream=True)
    
    # Ouvrir la vid√©o pour obtenir les propri√©t√©s
    cap = cv2.VideoCapture(video_path)
    fps = int(cap.get(cv2.CAP_PROP_FPS))
    width = int(cap.get(cv2.CAP_PROP_FRAME_WIDTH))
    height = int(cap.get(cv2.CAP_PROP_FRAME_HEIGHT))
    cap.release()
    
    # Cr√©er un writer pour sauvegarder la vid√©o r√©sultante
    output_path = 'yolo_video_result.mp4'
    fourcc = cv2.VideoWriter_fourcc(*'mp4v')
    out = cv2.VideoWriter(output_path, fourcc, fps, (width, height))
    
    frame_count = 0
    for result in results:
        frame_count += 1
        annotated_frame = result.plot()
        out.write(annotated_frame)
        
        if frame_count % 30 == 0:
            print(f"  Frame {frame_count} trait√©...")
    
    out.release()
    print(f"\n‚úÖ Vid√©o trait√©e: {frame_count} frames")
    print(f"‚úÖ Vid√©o avec d√©tections sauvegard√©e: {output_path}")

def demo_info_modele():
    """
    Affiche les informations sur le mod√®le YOLO
    """
    print("=" * 60)
    print("INFORMATIONS SUR LE MOD√àLE YOLO")
    print("=" * 60)
    
    # Charger le mod√®le
    model = YOLO('yolov8n.pt')
    
    print(f"\nMod√®le: YOLOv8n (nano)")
    print(f"Nombre de classes: {len(model.names)}")
    print(f"\nClasses d√©tectables:")
    print("-" * 60)
    
    # Afficher les classes par colonnes
    classes = list(model.names.values())
    for i in range(0, len(classes), 4):
        row = classes[i:i+4]
        print("  " + ", ".join(f"{c:15s}" for c in row))
    
    print("\n" + "=" * 60)

def main():
    """
    Menu principal pour tester les diff√©rentes fonctionnalit√©s
    """
    print("\n" + "=" * 60)
    print("EXEMPLES D'UTILISATION DE YOLO")
    print("=" * 60)
    print("\nOptions disponibles:")
    print("1. Informations sur le mod√®le")
    print("2. D√©tection sur une image de test")
    print("3. D√©tection sur une image personnalis√©e")
    print("4. D√©tection en temps r√©el (webcam)")
    print("5. D√©tection sur une vid√©o")
    print()
    
    choix = input("Choisissez une option (1-5, ou 'q' pour quitter): ").strip()
    
    if choix == '1':
        demo_info_modele()
    
    elif choix == '2':
        demo_detection_image()
    
    elif choix == '3':
        image_path = input("Entrez le chemin de l'image: ").strip()
        demo_detection_image(image_path)
    
    elif choix == '4':
        demo_detection_webcam()
    
    elif choix == '5':
        video_path = input("Entrez le chemin de la vid√©o: ").strip()
        demo_detection_video(video_path)
    
    elif choix.lower() == 'q':
        print("Au revoir!")
    
    else:
        print("Option invalide")

if __name__ == "__main__":
    # Par d√©faut, ex√©cuter la d√©tection sur une image de test
    print("D√©marrage de la d√©tection d'objets avec YOLO...")
    print("Le mod√®le sera t√©l√©charg√© automatiquement lors de la premi√®re utilisation.\n")
    
    # Lancer le menu
    main()